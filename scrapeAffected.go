// This is a script to scrape all of the addresses and their amount owed that were affected by the following hijacked contract:
// https://snowtrace.io/address/0xfc84aA4A1d909f2A9f73e7324a24586E28A00Fe9
package main

import (
	"encoding/csv"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"
)

type AutoGenerated struct {
	Status  string `json:"status"`
	Message string `json:"message"`
	Result  []struct {
		BlockNumber       string `json:"blockNumber"`
		TimeStamp         string `json:"timeStamp"`
		Hash              string `json:"hash"`
		Nonce             string `json:"nonce"`
		BlockHash         string `json:"blockHash"`
		From              string `json:"from"`
		ContractAddress   string `json:"contractAddress"`
		To                string `json:"to"`
		Value             string `json:"value"`
		TokenName         string `json:"tokenName"`
		TokenSymbol       string `json:"tokenSymbol"`
		TokenDecimal      string `json:"tokenDecimal"`
		TransactionIndex  string `json:"transactionIndex"`
		Gas               string `json:"gas"`
		GasPrice          string `json:"gasPrice"`
		GasUsed           string `json:"gasUsed"`
		CumulativeGasUsed string `json:"cumulativeGasUsed"`
		Input             string `json:"input"`
		Confirmations     string `json:"confirmations"`
	} `json:"result"`
}

func main() {

	// Snowtrace API pull to get all addresses that sent in mim to the rugged address.
	resp, err := http.Get("https://api.snowtrace.io/api?module=account&action=tokentx&address=0xfc84aA4A1d909f2A9f73e7324a24586E28A00Fe9&startblock=8539305&endblock=8554519&sort=asc")
	if err != nil {
		panic("No response from request")
	}

	defer resp.Body.Close()
	byteValue, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	var jsonResp AutoGenerated

	json.Unmarshal(byteValue, &jsonResp)

	var addresses []string
	var amounts []string

	var total float64

	for i := 0; i < len(jsonResp.Result); i++ {
		// 0x130966628846bfd36ff31a822705796e8cb8c18d == Mim Address
		// 0xfc84aa4a1d909f2a9f73e7324a24586e28a00fe9 == Rugged Presale Contract
		if jsonResp.Result[i].ContractAddress == "0x130966628846bfd36ff31a822705796e8cb8c18d" && jsonResp.Result[i].To == "0xfc84aa4a1d909f2a9f73e7324a24586e28a00fe9" {
			amountint, err := strconv.ParseFloat(jsonResp.Result[i].Value, 64)
			if err != nil {
				panic(err)
			}
			// Price per mim of each is 5*10^9.
			amountint = amountint / 5000000000
			total += amountint
			addresses = append(addresses, jsonResp.Result[i].From)
			amounts = append(amounts, fmt.Sprintf("%.0f", amountint))

		}

	}

	csvFile, err := os.Create("addresses.csv")
	if err != nil {
		log.Fatalf("Failed creating file: %s", err)
	}
	csvwriter := csv.NewWriter(csvFile)
	csvwriter.Write(addresses)
	csvwriter.Flush()
	csvFile.Close()

	csvFile2, err := os.Create("amounts.csv")
	if err != nil {
		log.Fatalf("Failed creating file: %s", err)
	}
	csvwriter2 := csv.NewWriter(csvFile2)
	csvwriter2.Write(amounts)
	csvwriter2.Flush()
	csvFile2.Close()

	log.Println("Total to give back(in Kandies): ", fmt.Sprintf("%.0f", total/1000000000))
}
